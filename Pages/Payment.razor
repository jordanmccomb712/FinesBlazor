@page "/payment"
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@inject StateContainer StateContainer
@inject IHttpClientFactory ClientFactory
@using Microsoft.Extensions.Logging
@inject ILogger<Payment> Logger

<h1>Pay your fine here</h1>

<EditForm Model="@paymentModel" OnSubmit="@HandleSubmit" class="row g-3">
    <div class="col-md-6">
        <label for="fineID" class="form-label">Fine ID:</label>
        <InputText id="fineID" @bind-Value="paymentModel.FineID" class="form-control" />

        <label for="title" class="form-label">Title:</label>
        <InputText id="title" @bind-Value="paymentModel.Title" class="form-control" />

        <label for="name" class="form-label">Cardholder Name:</label>
        <InputText id="name" @bind-Value="paymentModel.Name" class="form-control" />

        <label for="date" class="form-label">Date:</label>
        <InputDate id="date" @bind-Value="paymentModel.Date" class="form-control" />
    </div>
    <div class="col-md-6">
        <label for="cardNum" class="form-label">Card Number:</label>
        <InputNumber id="cardNum" @bind-Value="paymentModel.CardNum" class="form-control" />

        <label for="cvc" class="form-label">CVC:</label>
        <InputNumber id="cvc" @bind-Value="paymentModel.CVC" class="form-control" />
    </div>

    <div class="col-12">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

<img src="https://gamecardsdirect.com/content/image/Betaalmethoden/creditcard-nieuw.png" class="img-fluid" alt="Placeholder image">
@code {

    private PaymentModel paymentModel = new();

    private void HandleSubmit()
    {
        Logger.LogInformation("HandleSubmit called");
        Logger.LogInformation("title: " + paymentModel.Title);
        Logger.LogInformation("name: " + paymentModel.Name);
        Logger.LogInformation("Date: " + paymentModel.Date);
        Logger.LogInformation("CardNum: " + paymentModel.CardNum);
        Logger.LogInformation("CVC: " + paymentModel.CVC);
        Logger.LogInformation("FineID: " + paymentModel.FineID);

        // Process the form
    }
      private void ChangePropertyValue(string Id)
    {
        StateContainer.Property = Id;
    }
    

    private const string webApiUri = "https://fineapi.azurewebsites.net/api/Fines";
    //testing
    // private const string webApiUri = "http://localhost:5108/api/Fines";
    public static Fine newFine;
    
    private bool FineError;
    private bool shouldRender;
    private string? fineID = "";


    protected override bool ShouldRender() => shouldRender;
    
    protected async  Task RetrieveFineAsync()
    {

        
        fineID = StateContainer.testID;
        var request = new HttpRequestMessage(HttpMethod.Get, webApiUri + "/" + fineID);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);


        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            newFine = await JsonSerializer.DeserializeAsync<Fine>(responseStream);
        }
        else
        {
            FineError = true;
        }

        shouldRender = true;

        
    }

     public async  Task PayFineAsync()
    {

        await RetrieveFineAsync();
     
        newFine.IsPaid = true;

        var request = new HttpRequestMessage(HttpMethod.Put, webApiUri + "/" + fineID);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");
        var jsonFine = JsonSerializer.Serialize(newFine);
        var content = new StringContent(jsonFine, Encoding.UTF8, "application/json");
        request.Content = content;

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
          
        }
        else
        {
            FineError = true;
        }

        shouldRender = true;
        
    }
    
}

